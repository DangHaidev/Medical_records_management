// <auto-generated />
using System;
using Medical_record.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medical_record.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    [Migration("20250521061052_PhieuKhamBenhTable")]
    partial class PhieuKhamBenhTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Medical_record.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("appointmentId")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("appointmentDate");

                    b.Property<string>("AppointmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("appointmentType");

                    b.Property<int?>("EmployeeId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("employeeId")
                        .IsFixedLength();

                    b.Property<int?>("PatientId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("patientId")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__D06765FEC75DCD3B");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("employeeId")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("specialty");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C134C9C16ED1D79F");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("recordId")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateOnly?>("AdmissionDate")
                        .HasColumnType("date")
                        .HasColumnName("admissionDate");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("department");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("diagnosis");

                    b.Property<DateOnly?>("DischargeDate")
                        .HasColumnType("date")
                        .HasColumnName("dischargeDate");

                    b.Property<int?>("PatientId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("patientId")
                        .IsFixedLength();

                    b.Property<string>("Room")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("room");

                    b.Property<string>("Treatment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("treatment");

                    b.HasKey("RecordId")
                        .HasName("PK__MedicalR__D825195E92C503BF");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecord", (string)null);
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("patientId")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birthDate");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("FeePayment")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.HasKey("PatientId")
                        .HasName("PK__Patient__A17005ECE2EF97DC");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.PhieuKhamBenh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalRecordRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MedicalRecordRecordId");

                    b.ToTable("PhieuKhamBenhs");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.PhieuKhamBenhDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhieuKhamBenhId")
                        .HasColumnType("int");

                    b.Property<int?>("PhieuKhamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhieuKhamBenhId");

                    b.ToTable("PhieuKhamBenhDetails");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("prescriptionId")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateOnly?>("DatePrescribed")
                        .HasColumnType("date")
                        .HasColumnName("datePrescribed");

                    b.Property<string>("Dosage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dosage");

                    b.Property<int?>("EmployeeId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("employeeId")
                        .IsFixedLength();

                    b.Property<string>("Medication")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("medication");

                    b.Property<int?>("RecordId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("recordId")
                        .IsFixedLength();

                    b.HasKey("PrescriptionId")
                        .HasName("PK__Prescrip__7920FC245F59740F");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RecordId");

                    b.ToTable("Prescription", (string)null);
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("reportId")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<int?>("EmployeeId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("employeeId")
                        .IsFixedLength();

                    b.Property<DateOnly?>("GeneratedDate")
                        .HasColumnType("date")
                        .HasColumnName("generatedDate");

                    b.Property<string>("ReportType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("reportType");

                    b.HasKey("ReportId")
                        .HasName("PK__Report__1C9B4E2D14E3DF27");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Medical_record.Domain.Entities.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Appointme__emplo__5BE2A6F2");

                    b.HasOne("Medical_record.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__Appointme__patie__5AEE82B9");

                    b.Navigation("Employee");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("Medical_record.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__MedicalRe__patie__5812160E");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.PhieuKhamBenh", b =>
                {
                    b.HasOne("Medical_record.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Medical_record.Domain.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordRecordId");

                    b.Navigation("Employee");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.PhieuKhamBenhDetail", b =>
                {
                    b.HasOne("Medical_record.Domain.Entities.PhieuKhamBenh", "PhieuKhamBenh")
                        .WithMany()
                        .HasForeignKey("PhieuKhamBenhId");

                    b.Navigation("PhieuKhamBenh");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Medical_record.Domain.Entities.Employee", "Employee")
                        .WithMany("Prescriptions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Prescript__emplo__5FB337D6");

                    b.HasOne("Medical_record.Domain.Entities.MedicalRecord", "Record")
                        .WithMany("Prescriptions")
                        .HasForeignKey("RecordId")
                        .HasConstraintName("FK__Prescript__recor__5EBF139D");

                    b.Navigation("Employee");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Report", b =>
                {
                    b.HasOne("Medical_record.Domain.Entities.Employee", "Employee")
                        .WithMany("Reports")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Report__employee__628FA481");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Medical_record.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
